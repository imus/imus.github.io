<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ElementUI-整体设计(1)</title>
      <link href="2020/10/15/Note/ElementUI-%E6%95%B4%E4%BD%93%E8%AE%BE%E8%AE%A1(1)/"/>
      <url>2020/10/15/Note/ElementUI-%E6%95%B4%E4%BD%93%E8%AE%BE%E8%AE%A1(1)/</url>
      
        <content type="html"><![CDATA[<p>如何学习ElementUI源码：<a href="https://www.zhihu.com/question/60706223">https://www.zhihu.com/question/60706223</a> （知乎）</p><hr><h3 id="整体设计2-13-2"><a href="#整体设计2-13-2" class="headerlink" title="整体设计2.13.2"></a>整体设计2.13.2</h3><h4 id="element-ui的开发考虑的需求如下："><a href="#element-ui的开发考虑的需求如下：" class="headerlink" title="element-ui的开发考虑的需求如下："></a>element-ui的开发考虑的需求如下：</h4><ol><li>功能： 组件，自定义主题，国际化</li><li>文档：官方文档和demo，低成本，多语。</li><li>使用方式： cdn、npm，支持按需引入。</li><li>工程化：开发、测试、构建、部署，CI。</li></ol><h4 id="需求实现："><a href="#需求实现：" class="headerlink" title="需求实现："></a>需求实现：</h4><h5 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h5><p>​        组件丰富，分为6大类： 基础、表单类、数据类、提示类、导航类和其他组件。</p><p>​        目录：<code>/packages</code></p><h5 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h5><p>​        支持在线主题编辑：</p><p>​            思路：主题通过配置维护，修改后把新的配置交给server，server根据配置返回新的CSS（变量替换，编译），覆                        盖默认样式。？？？<u>具体如何实现，探索下</u></p><p>​            在主题编辑页的网络面板中可以看到获取配置getVariable和更新配置updateVariable的请求，代码目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;examples&#x2F;components&#x2F;theme&#x2F;loader&#x2F;index.vue &#x2F;&#x2F; 监听事件，onAction更新主题，拿到配置applyStyle覆盖默认样式</span><br><span class="line">getVarible, 主题配置右侧面板数据</span><br><span class="line">localStorage也会保存一份用户修改的配置，可能会有多个主题</span><br><span class="line">\examples\components\theme-configurator\index.vue &#x2F;&#x2F; onAction, 触发ACTION_APPLY_THEME事件</span><br></pre></td></tr></table></figure><p>​            </p><p>​        目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;packages&#x2F;theme-chalk &#x2F;&#x2F;组件样式、公共样式</span><br><span class="line">&#x2F;packages&#x2F;theme-chalk&#x2F;src&#x2F;common&#x2F;var.scss &#x2F;&#x2F; 组件中引入的样式变量的定义</span><br></pre></td></tr></table></figure><h5 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h5><p>​        element-ui未使用vue-i18n。</p><p>​        国际化方案会用到语言包，目录：<code>element\src\locale\lang</code></p><p>​        pagination组件中Jumper组件中t函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import Locale from &#39;element-ui&#x2F;src&#x2F;mixins&#x2F;locale&#39;; &#x2F;&#x2F; t函数定义位置，最终位置\src\locale\index.js</span><br><span class="line">mixin: [Locale],</span><br><span class="line"> render(h) &#123;</span><br><span class="line">        return (</span><br><span class="line">          &lt;span class&#x3D;&quot;el-pagination__jump&quot;&gt;</span><br><span class="line">            &#123; this.t(&#39;el.pagination.goto&#39;) &#125;</span><br><span class="line">          &lt;&#x2F;span&gt;</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">  语言包中配置：</span><br><span class="line">    pagination: &#123;</span><br><span class="line">      goto: &#39;前往&#39;,</span><br><span class="line">      pagesize: &#39;条&#x2F;页&#39;,</span><br><span class="line">      total: &#39;共 &#123;total&#125; 条&#39;,</span><br><span class="line">      pageClassifier: &#39;页&#39;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>​    ？？？<u>字符串格式化函数format</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* 使用语言包时，需要注册 *&#x2F;</span><br><span class="line">import lang from &#39;element-ui&#x2F;lib&#x2F;locale&#x2F;lang&#x2F;en&#39;</span><br><span class="line">import locale from &#39;element-ui&#x2F;lib&#x2F;locale&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置语言</span><br><span class="line">locale.use(lang)</span><br></pre></td></tr></table></figure><h5 id="文档（值得借鉴）"><a href="#文档（值得借鉴）" class="headerlink" title="文档（值得借鉴）"></a>文档（值得借鉴）</h5><p>​    目录： <code>element\examples\docs</code></p><p>​    格式.md。</p><p>​    route.config.js // 路由配置，加载md文档</p><p>​        registerRoute函数（重点）</p><p>​        addRoute中的loadDocs(lang, page.path) // 获取对应.md组件</p><p>​    webpack.demo.js中module配置解析.md格式的文档：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       test: &#x2F;\.md$&#x2F;,</span><br><span class="line">       use: [</span><br><span class="line">         &#123;</span><br><span class="line">           loader: &#39;vue-loader&#39;,</span><br><span class="line">           options: &#123;</span><br><span class="line">             compilerOptions: &#123;</span><br><span class="line">               preserveWhitespace: false</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         &#x2F;&#x2F; loader是从后往前执行的，使用md-loader处理.md文档转化为.vue格式字符串</span><br><span class="line">         &#123;</span><br><span class="line">           loader: path.resolve(__dirname, &#39;.&#x2F;md-loader&#x2F;index.js&#39;) &#x2F;&#x2F; build&#x2F;md-loader&#x2F;index.js</span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>​    md-loader工作： ？？？<u>md-loader处理过程</u></p><p>​        md.render(source)<code>对</code>md<code>文档解析，提取文档中</code>:::demo {content} :::<code>内容，分别生成一些 Vue 的模板字符串，然后再从这个模板字符串中循环查找</code><!--element-demo:` 和 `:element-demo--><code>包裹的内容，从中提取模板字符串到</code>output<code>中，提取 script 到</code>componenetsString<code>中，然后构造</code>pageScript</p><h5 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h5><p>​    CDN： 打包一份CSS和JS,全量引入，体积大</p><p>​    npm 全量：引入js,css</p><p>​    npm按需引入: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Button&#125; from &#39;element-ui&#39;</span><br><span class="line">Vue.component(Button.name, Button)</span><br></pre></td></tr></table></figure><p>​        为什么它可以按需引入？需要借助babel-plugin-component, 然后修改.babelrc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [[&quot;es2015&quot;, &#123; &quot;modules&quot;: false &#125;]],</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;component&quot;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;libraryName&quot;: &quot;element-ui&quot;,</span><br><span class="line">        &quot;styleLibraryName&quot;: &quot;theme-chalk&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        转化为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var button &#x3D; require(&#39;element-ui&#x2F;lib&#x2F;button&#39;)</span><br><span class="line">require(&#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;button.css&#39;)</span><br></pre></td></tr></table></figure><p>​    产生组件依赖并且同时按需引入的时候，代码会有冗余。于是，在build/config配置webpack的externals选项，防止将这些 import 的包打包到 bundle 中，并在运行时再去从外部获取这些扩展依赖。(js)。</p><p>​    lib/table.js对 <code>CheckBox</code> 组件的依赖引入如下：<code>570 module.exports = require(&quot;element-ui/lib/checkbox&quot;);</code></p><p>​    但是， css样式并未做冗余处理。</p><p>​    要解决按需引入的 JS 和 CSS 的冗余问题并非难事，可以用后编译的思想，即依赖包提供源码，而编译交给应用处理，这样不仅不会有组件冗余代码，甚至连编译的冗余代码都不会有。参考滴滴cube-ui:（webpack 应用编译优化之路） <a href="https://juejin.im/post/6844903502586593288">https://juejin.im/post/6844903502586593288</a></p><h5 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h5><p>​    ESLint, webpack HotReload热重载, karma测试框架，Travis CI集成。</p><h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><p>​    npm run dist， 输出lib目录</p><p>​    ？？？ <u>dist整体流体需要详细分析下</u></p><p>​    <code>build:file</code> 运行 <code>build</code> 目录下几个命令，包括对 <code>icon</code>、<code>entry</code>、<code>i18n</code>、<code>version</code> 等初始化（根据一些规则做文件的 IO）</p><p>​    pub: 部署，通过运行一系列的 bash 脚本，实现了代码的提交、合并、版本管理、npm 发布、官网发布等，让整个发布流程自动化完成。</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>​    build // 构建</p><p>​    lib // dist构建输出的目录</p><p>​    examples // demo源码，包括在线定制主题前端交互部分</p><p>​        entry.js // demo入口</p><p>​    packages  // 组件源码</p><p>​        theme-chalk // 组件样式、公共样式（可独立发布）</p><p>​            src/common/var.scss // 变量定义： 组件样式中的颜色、字体、线条等通过变量方式引入</p><p>​    src // 组件依赖的一些公共模块</p><p>​        local/lang // 国际化方案组件库语言包， 关键t函数</p><p>​    test // 测试</p><p>​    types // 组件类型ts</p><p>​    FAQ.md</p><p>​    ···</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="2020/10/13/Note/regexp/"/>
      <url>2020/10/13/Note/regexp/</url>
      
        <content type="html"><![CDATA[<p>正则表达式：是一种文本模式包括普通（原义）字符和特殊意义字符（元字符: 代替一个或多个字符，可以规定其前面的字符在目标对象中如何出现）。</p><p>作用：字符串校验、替换和提取子串。</p><p>正则表达式构造： 类似创建数学表达式：用多种元字符和运算符可将小的表达式创建成更大的。</p><p>正则表达式组件：单个字符、字符集合[]或者[^]（取反）、字符范围{}、字符间的选择|及这些组件的任意组合。</p><p>字符：</p><ul><li><p>普通字符：除元字符外的，包括可打印不可打印的。</p></li><li><p>特殊字符：</p><ul><li><p><u><strong>限定符</strong></u>：限定前面的子表达式出现次数。*，+，？，{n}, {n,}, {n, m}。前两个是贪婪的，？非贪婪。通过在 *,<strong>+</strong> 或 <strong>?</strong> 限定符之后放置 **?**，该表达式从”贪婪”表达式转换为”非贪婪”表达式(最小匹配)。</p></li><li><p><u><strong>定位符</strong></u>：将正则固定到行首尾或者单词首尾。^，$， \b（单词边界），\B。边界只能有一个，限定定位不能同时用，如：^*。</p></li><li><p><u><strong>选择</strong></u>： （）表示捕获分组，标记 <em>子表达式</em>  的开始结尾，会把里面匹配值保存起来，多匹配值可用n查看。</p><p>​    eg: <code>&#39;123adfj464&#39;.match(/([1-9])([a-z]+)/g) //[&#39;3adfj&#39;]</code></p><p>副作用：把匹配的结果缓存（存在临时缓冲区编号从1到99，可以\n方位缓冲区，n为十进制数）。消除方法用   <strong>?:</strong> 非捕获元，放在第一个选项前,即（？:[1-9]）。</p><p>除了？： 外？= 和？！也是<strong>非捕获元</strong>。</p><p>​    **exp1(?=exp2)**：查找 exp2 前面的 exp1。</p><p>​    <strong>(?&lt;=exp2)exp1</strong>：查找 exp2 后面的 exp1</p><p>​    **exp1(?!exp2)**：查找后面不是 exp2 的 exp1</p><p>​    <strong>(?&lt;!=exp2)exp1</strong>：查找前面不是 exp2 的 exp1。</p><p>参考正则表达式的先行和后行断言：<a href="https://www.runoob.com/w3cnote/reg-lookahead-lookbehind.html">https://www.runoob.com/w3cnote/reg-lookahead-lookbehind.html</a></p></li><li><p><strong><u>修饰符</u>**：igm(多行匹配, 边界字符 **^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾)s(.符不包括\n的任意字符，加s后匹配包括\n)</p></li></ul></li><li><p>运算符优先级：高到低<br>​    \转义符  </p><p>​    ()(?:)(?=)[]圆括号方括号  </p><p>​     *, +, ?, {n}, {n,}, {n,m}限定符  </p><p>​     ^, $,定位符和序列（\元字符或任何字符） </p><p>​     |或操作： 字符高于替换运算符的优先级，”m|food”匹配”m”或”food”。要匹配”mood”或”food”，使用括号创建子表达式，从而产生”(m|f)ood”</p></li><li><p>() 和 [] 的区别</p><p><strong>()</strong> 内的内容表示的是一个子表达式，() 本身不匹配任何东西，也不限制匹配任何东西，只是把括号内的内容作为同一个表达式来处理。</p><p><strong>[]</strong> 表示匹配的字符在 [] 中，并且只能出现一次，并且特殊字符写在 [] 会被当成普通字符来匹配。例如 [(a)]，会匹配 (、a、)、这三个字符。</p></li><li><p>小括号的另一种用途是通过语法(?#comment)来包含注释。最好开启修饰符中IgnorePatternWhitespace(忽略空白)</p><p>eg: <code>2[0-4]\d(?#200-249)|25[0-5](?#250-255)|[01]?\d\d?(?#0-199)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(?&lt;&#x3D;    # 断言要匹配的文本的前缀</span><br><span class="line">&lt;(\w+)&gt; # 查找尖括号括起来的字母或数字(即HTML&#x2F;XML标签)</span><br><span class="line">)       # 前缀结束</span><br><span class="line">.*      # 匹配任意文本</span><br><span class="line">(?&#x3D;     # 断言要匹配的文本的后缀</span><br><span class="line">&lt;\&#x2F;\1&gt;  # 查找尖括号括起来的内容：前面是一个&quot;&#x2F;&quot;，后面是先前捕获的标签</span><br><span class="line">)       # 后缀结束</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2016/12/15/hello-world/"/>
      <url>2016/12/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
